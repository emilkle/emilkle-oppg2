name: Apply Infrastructure to dev and staging Workspaces

on:
  pull_request:
    branches:
      - dev
    paths:
      - 'emilkle-oppg2/**'
  workflow_dispatch:
    inputs:
      action_type:
        description: 'What terraform action do you want to perform? (apply/destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - 'apply'
          - 'destroy'

env: 
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  GH_TOKEN: ${{ github.token }}
  WORKING_DIR: .
  REVIEWER: "emilkle"
  ASSIGNEE: "emilkle"

# This pipeline will apply infrastructure to all workspaces except prod

jobs:
    dev_stage:
      runs-on: ubuntu-22.04
      steps:
        - name: Checkout  
          uses: actions/checkout@v4

        - name: Azure CLI Login
          run: |
            az login --service-principal -u ${{ env.ARM_CLIENT_ID }} -p ${{ env.ARM_CLIENT_SECRET }} --tenant ${{ env.ARM_TENANT_ID }}
              
        - name: Terraform init, fmt and validate before deploying to each workspace
          if: github.event.inputs.action_type == 'apply'
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                               [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform init 
                terraform fmt
                terraform validate
                cd ..
              fi  
            done
          
        - uses: actions/checkout@master
          if: github.event.inputs.action_type == 'apply'
        - name: tfsec
    
          uses: aquasecurity/tfsec-action@v1.0.3
          with:
            working_directory: ${{ env.WORKING_DIR }}
            github_token: ${{ env.GH_TOKEN }}
    
        - name: Terraform init, plan, and apply to dev workspace
          if: github.event.inputs.action_type == 'apply'
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform init
                terraform workspace select dev || terraform workspace new dev
                terraform plan -out=main-dev.tfplan -var-file="terraform.tfvars.dev"
                terraform apply "main-dev.tfplan"
                cd ..
              fi  
            done
  
        - name: Terraform destroy dev 
          if: github.event.inputs.action_type == 'destroy'
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform init
                terraform workspace select dev || terraform workspace new dev
                terraform destroy -auto-approve
                cd ..
              fi   
            done

        - name: Install GitHub CLI
          if: github.event.inputs.action_type == 'apply'
          run: sudo apt-get install gh -y
  
        - name: Check if 'staging' Branch Exists
          if: github.event.inputs.action_type == 'apply'
          run: |
            git fetch origin main 
            if ! git ls-remote --exit-code --heads origin staging; then
              echo "Staging branch does not exist. Creating it now."
              git checkout main         
              git pull origin main       
              git checkout -b staging
              git push origin staging
            else
              echo "Staging branch exists."
            fi

        - name: Create Pull Request from dev to staging
          if: github.event.inputs.action_type == 'apply'
          run: |
            gh pr create --base staging --head dev --title "Auto PR: Promote dev to staging" \
            --body "Automatic pull request created by GitHub Actions to promote changes from dev to staging." \
            --reviewer ${{ env.REVIEWER }} \
            --assignee ${{ env.ASSIGNEE }}
  
    stage_prod:
      needs: dev_stage
      runs-on: ubuntu-22.04
      steps:
        - name: Checkout  
          uses: actions/checkout@v4

        - name: Azure CLI Login
          run: |
            az login --service-principal -u ${{ env.ARM_CLIENT_ID }} -p ${{ env.ARM_CLIENT_SECRET }} --tenant ${{ env.ARM_TENANT_ID }}  
    
        - name: Terraform init, plan, and apply to staging workspace
          if: github.event.inputs.action_type == 'apply'
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform init
                terraform workspace select staging || terraform workspace new staging
                terraform plan -out=main-staging.tfplan -var-file="terraform.tfvars.staging"
                terraform apply "main-staging.tfplan" 
                cd ..
              fi  
            done
  
        - name: Terraform destroy staging 
          if: github.event.inputs.action_type == 'destroy'
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform init
                terraform workspace select staging || terraform workspace new staging
                terraform destroy -auto-approve
                cd ..
              fi  
            done
  
        - name: Create Pull Request from staging to prod (main)
          if: github.event.inputs.action_type == 'apply'
          run: |
            sudo apt-get install gh -y 
            gh pr create --base main --head staging --title "Auto PR: Promote staging to prod" \
            --body "Automatic pull request created by GitHub Actions to promote changes from staging to prod." \
            --reviewer ${{ env.REVIEWER }} \
            --assignee ${{ env.ASSIGNEE }}
