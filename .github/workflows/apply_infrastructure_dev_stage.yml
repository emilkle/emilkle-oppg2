name: Apply Infrastructure to dev and stage Workspaces

on:
  pull_request:
    branches:
      - dev
    paths:
      - 'emilkle-oppg2/**'
  workflow_dispatch:
    inputs:
      action_type:
        description: 'What terraform action do you want to perform? (apply/destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - 'apply'
          - 'destroy'

env: 
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  GH_TOKEN: ${{ github.token }}
  AZURE_SQL_SERVER_NAME: "mssql-e-commerce-db-server"
  AZURE_SQL_DATABASE_NAME: "mssql-e-commerce-db"
  AZURE_SQL_ADMIN_USER: "4dm1n157r470r"
  AZURE_SQL_ADMIN_PASSWORD: "4-v3ry-53cr37-p455w0rd"
  SQL_FILE: ./emilkle-oppg2/sql/product_and_user_data.sql
  WORKING_DIR: .
  REVIEWER: "emilkle"
  ASSIGNEE: "emilkle"

# This pipeline will apply infrastructure to all workspaces except prod

jobs:
    dev_stage:
      runs-on: ubuntu-22.04
      steps:
        - name: Checkout  
          uses: actions/checkout@v4

        - name: Azure CLI Login
          run: |
            az login --service-principal -u ${{ env.ARM_CLIENT_ID }} -p ${{ env.ARM_CLIENT_SECRET }} --tenant ${{ env.ARM_TENANT_ID }}
              
        - name: Terraform init
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                               [ "$(basename "$dir")" == "core_infrastructure" ] || 
                               [ "$(basename "$dir")" == "global" ] ||
                                [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform init 
              fi  
            done
          
        - name: Terraform fmt
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "global" ] ||
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform fmt 
              fi
            done

        - name: Terraform validate
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "global" ] ||
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform validate 
              fi  
            done
  
        - uses: actions/checkout@master
        - name: tfsec
    
          uses: aquasecurity/tfsec-action@v1.0.3
          with:
            working_directory: ${{ env.WORKING_DIR }}
            github_token: ${{ env.GH_TOKEN }}
    
        - name: Terraform workspace select dev or terraform workspace new dev 
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "global" ] ||
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform workspace select dev || terraform workspace new dev
                cd ..
              fi  
            done
         
        - name: Terraform plan dev 
          if: github.event.inputs.action_type == 'apply'
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "global" ] ||
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform plan 
              fi  
            done
    
        - name: Terraform apply dev 
          if: github.event.inputs.action_type == 'apply'
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "global" ] ||
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform apply -auto-approve 
              fi
            done
  
        - name: Terraform destroy dev 
          if: github.event.inputs.action_type == 'destroy'
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "global" ] ||
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform destroy -auto-approve
              fi   
            done

        - name: Insert sql data
          if: github.event.inputs.action_type == 'apply'
          run: |
            # Execute the SQL script
            az sql db query \
              --server ${{ env.AZURE_SQL_SERVER_NAME }} \
              --database ${{ env.AZURE_SQL_DATABASE_NAME }} \
              --admin-user ${{ env.AZURE_SQL_ADMIN_USER }} \
              --admin-password ${{ env.AZURE_SQL_ADMIN_PASSWORD }} \
              --query-file ${{ env.SQL_FILE }}

        - name: Install GitHub CLI
          run: sudo apt-get install gh -y
  
        - name: Check if 'stage' Branch Exists
          run: |
            git fetch origin dev 
            if ! git ls-remote --exit-code --heads origin stage; then
              echo "Stage branch does not exist. Creating it now."
              git checkout dev         
              git pull origin dev
              git checkout -b stage
              git push origin stage
            else
              echo "Stage branch exists."
            fi

        - name: Create Pull Request from dev to stage
          if: github.event.inputs.action_type == 'apply'
          run: |
            gh pr create --base stage --head dev --title "Auto PR: Promote dev to stage" \
            --body "Automatic pull request created by GitHub Actions to promote changes from dev to stage." \
            --reviewer ${{ env.REVIEWER }} \
            --assignee ${{ env.ASSIGNEE }}
  
    stage_prod:
      needs: dev_stage
      runs-on: ubuntu-22.04
      steps:
        - name: Checkout  
          uses: actions/checkout@v4

        - name: Azure CLI Login
          run: |
            az login --service-principal -u ${{ env.ARM_CLIENT_ID }} -p ${{ env.ARM_CLIENT_SECRET }} --tenant ${{ env.ARM_TENANT_ID }}  
              
        - name: Terraform init
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "global" ] ||
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform init
              fi  
            done 
    
        - name: Terraform workspace select stage or terraform workspace new stage
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "global" ] ||
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform workspace select stage || terraform workspace new stage
                cd ..
              fi  
            done
    
        - name: Terraform plan stage
          if: github.event.inputs.action_type == 'apply'
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "global" ] ||
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform plan
              fi
            done

        - name: Terraform apply stage 
          if: github.event.inputs.action_type == 'apply'
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "global" ] ||
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform apply -auto-approve
              fi  
            done
  
        - name: Terraform destroy stage 
          if: github.event.inputs.action_type == 'destroy'
          run: |
            for dir in ${{ env.WORKING_DIR }}/*; do
              if { [ "$(basename "$dir")" == "application_plattform" ] || 
                                [ "$(basename "$dir")" == "core_infrastructure" ] || 
                                [ "$(basename "$dir")" == "global" ] ||
                                  [ "$(basename "$dir")" == "nn-deployment" ]; }; then
                cd "$dir"
                terraform destroy -auto-approve
              fi  
            done
  
        - name: Create Pull Request from stage to prod (main)
          if: github.event.inputs.action_type == 'apply'
          run: |
            sudo apt-get install gh -y 
            gh pr create --base main --head stage --title "Auto PR: Promote stage to prod" \
            --body "Automatic pull request created by GitHub Actions to promote changes from stage to prod." \
            --reviewer ${{ env.REVIEWER }} \
            --assignee ${{ env.ASSIGNEE }}
